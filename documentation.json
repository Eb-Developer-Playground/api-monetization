{
    "pipes": [],
    "interfaces": [
        {
            "name": "ApiKeys",
            "id": "interface-ApiKeys-045a08ec99843f9a31404647055e6de19387316f3cebbbc13664e93e59b10b02fc013d606a6075195cf3033a4f9c3f75270628eaecdd3170d790170ce82c173b",
            "file": "src/app/portal/interfaces/api-keys.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ApiKeys {\n  apiName: string;\n  apiKey: string;\n  generatedDate: Date;\n  revoked: boolean;\n}\n",
            "properties": [
                {
                    "name": "apiKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "apiName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "generatedDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "revoked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UserSignUp",
            "id": "interface-UserSignUp-1d4f167fb9ce5ae766535b34e2e4275f82645d5cb2981efaca958ac9ef5cbaebfb7cbcd481fa4193d82fd344b78dbbd2a5eb1b18bf55df674aacc1fc79bb7b01",
            "file": "src/app/authentication/interfaces/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserSignUp {\n  username: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n}\n",
            "properties": [
                {
                    "name": "confirmPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthenticationService",
            "id": "injectable-AuthenticationService-bb61d294046b21423a2a392ff0ddf04deb45d79c40aa698e394e6471f4e1723b3fd7231b2e19d46f9f2335f6ba56611b65f38ba96273f9bfc8713d644df018da",
            "file": "src/app/authentication/services/authentication.service.ts",
            "properties": [
                {
                    "name": "validEmails",
                    "defaultValue": "['user1@example.com', 'user2@example.com']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationService {\n  private validEmails = ['user1@example.com', 'user2@example.com'];\n\n  constructor() {}\n\n  login(email: string, password: string): Observable<boolean> {\n    const isValidEmail = this.validEmails.includes(email.toLowerCase());\n\n    if (isValidEmail) {\n      localStorage.setItem('authenticated', 'true');\n    }\n\n    return of(isValidEmail);\n  }\n\n  logout(): void {\n    localStorage.removeItem('authenticated');\n  }\n\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('authenticated');\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DataService",
            "id": "injectable-DataService-4aec3e808bbcc7b8662fb905f1b2f862085faff45a4a24ae84b7c59f77c971d2b97ee6ee7614d032d965620e467061124c7e50334aefc5b8a760fb7b190d18b8",
            "file": "src/app/portal/services/module-data/data.service.ts",
            "properties": [
                {
                    "name": "cardData",
                    "defaultValue": "[\n    {\n      id: 1,\n      title: 'Kenya Sales Tax API',\n      content:\n        'Get accurate real-time sales tax rates by ZIP code in Kenya. Provides real-time rates for all (47) KE counties.',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/2e1508b7975cc95f919ab445f8c8c113/raw/21b2d415e5fcef7e786ef54a8e9d450de4e3a09a/tax-rates.swagger.json',\n    },\n    {\n      id: 2,\n      title: 'Words API',\n      content:\n        'Words API lets you retrieve information about English words, including definitions, synonyms, rhymes, pronunciation, syllables, and frequency of usage.',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/e2a3e1fc3cac0a777f9a20ad70626518/raw/7976ad51af2e31a23aa32e5f890751d196e2a545/word-processing.swagger.json',\n    },\n    {\n      id: 3,\n      title: 'Domainr',\n      content:\n        'The Domainr API lets you programmatically retrieve instant domain search results and availability status.',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/4820e55beb33759a648246a82b163891/raw/0208a39b62b1949ac0d63f2a04246d07c20fbef5/domanair.swager.json',\n    },\n    {\n      id: 4,\n      title: 'Text Translator',\n      content:\n        'Translate text to 100+ languages ​. Fast processing, cost saving. Free up to 100,000 characters per month',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/11ef24ce8da40cb4170b1b79d2e4bcc1/raw/b57352ee5e805da8e117c7b4e220ab3b762b2157/text.swagger.json',\n    },\n    {\n      id: 5,\n      title: 'Imgur',\n      content:\n        'Imgur’s API exposes the entire Imgur infrastructure via a standardized programmatic interface. Using Imgur’s API, you can do just about anything you can do on imgur.com.',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/79d4395431fb160eb48dd179ad23c054/raw/b2a4b2cd113c42228dab87c0666a6b24ed49905d/imgur.swagger.json',\n    },\n    {\n      id: 6,\n      title: 'boundaries-io',\n      content:\n        'A simple & very fast API that will allow you to integrate multiple GeoJson US boundaries results into your apps and systems.',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/ac6e395b165da8b1a83f27400ae440f0/raw/40a150ebbd51a34014fe42f8564376898e210d1f/boundaries.swagger.json',\n    },\n    {\n      id: 7,\n      title: 'TheRundown',\n      content:\n        'The fastest real-time odds, scores, schedules, and stats from major sportsbooks. Click next to see our API documentation for more details.',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/0cd227939fbf11dff02d9a9ee6faac75/raw/59ecfb349491474e015dc68b8edc86adf53670c5/rundown.swagger.json',\n    },\n    {\n      id: 8,\n      title: 'Recipe-Food-Nutrition',\n      content:\n        'The spoonacular Recipe - Food - Nutrition API gives you access to thousands of recipes, storebought packaged foods, and chain restaurant menu items.',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/21e38f83433f8f11cbc1d4c969e2a9cc/raw/ec64f43f3135449095ea194b6de4d5125e461340/food-nutrition.swagger.json',\n    },\n    {\n      id: 9,\n      title: 'Email Verifier',\n      content:\n        'Validate email addresses in real-time. Make sure a mailbox really exists.',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/3673d646075f44b1733a82ed320cd9f7/raw/47a64f29ba14c6b38aae3798789637af62122b8d/emal-verifier.swagger.json',\n    },\n    {\n      id: 10,\n      title: 'Crunchbase',\n      content:\n        'Build powerful applications and integrate Crunchbase into your web and mobile applications with the REST API.',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/d110bf30753af937589b86908ad707cc/raw/88ed8a440ee983b404721189a11f69e279178a8f/cruncbase.swagger.json',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "getUtilizationData",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type[]",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DataService {\n  constructor() {}\n\n  cardData = [\n    {\n      id: 1,\n      title: 'Kenya Sales Tax API',\n      content:\n        'Get accurate real-time sales tax rates by ZIP code in Kenya. Provides real-time rates for all (47) KE counties.',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/2e1508b7975cc95f919ab445f8c8c113/raw/21b2d415e5fcef7e786ef54a8e9d450de4e3a09a/tax-rates.swagger.json',\n    },\n    {\n      id: 2,\n      title: 'Words API',\n      content:\n        'Words API lets you retrieve information about English words, including definitions, synonyms, rhymes, pronunciation, syllables, and frequency of usage.',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/e2a3e1fc3cac0a777f9a20ad70626518/raw/7976ad51af2e31a23aa32e5f890751d196e2a545/word-processing.swagger.json',\n    },\n    {\n      id: 3,\n      title: 'Domainr',\n      content:\n        'The Domainr API lets you programmatically retrieve instant domain search results and availability status.',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/4820e55beb33759a648246a82b163891/raw/0208a39b62b1949ac0d63f2a04246d07c20fbef5/domanair.swager.json',\n    },\n    {\n      id: 4,\n      title: 'Text Translator',\n      content:\n        'Translate text to 100+ languages ​. Fast processing, cost saving. Free up to 100,000 characters per month',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/11ef24ce8da40cb4170b1b79d2e4bcc1/raw/b57352ee5e805da8e117c7b4e220ab3b762b2157/text.swagger.json',\n    },\n    {\n      id: 5,\n      title: 'Imgur',\n      content:\n        'Imgur’s API exposes the entire Imgur infrastructure via a standardized programmatic interface. Using Imgur’s API, you can do just about anything you can do on imgur.com.',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/79d4395431fb160eb48dd179ad23c054/raw/b2a4b2cd113c42228dab87c0666a6b24ed49905d/imgur.swagger.json',\n    },\n    {\n      id: 6,\n      title: 'boundaries-io',\n      content:\n        'A simple & very fast API that will allow you to integrate multiple GeoJson US boundaries results into your apps and systems.',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/ac6e395b165da8b1a83f27400ae440f0/raw/40a150ebbd51a34014fe42f8564376898e210d1f/boundaries.swagger.json',\n    },\n    {\n      id: 7,\n      title: 'TheRundown',\n      content:\n        'The fastest real-time odds, scores, schedules, and stats from major sportsbooks. Click next to see our API documentation for more details.',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/0cd227939fbf11dff02d9a9ee6faac75/raw/59ecfb349491474e015dc68b8edc86adf53670c5/rundown.swagger.json',\n    },\n    {\n      id: 8,\n      title: 'Recipe-Food-Nutrition',\n      content:\n        'The spoonacular Recipe - Food - Nutrition API gives you access to thousands of recipes, storebought packaged foods, and chain restaurant menu items.',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/21e38f83433f8f11cbc1d4c969e2a9cc/raw/ec64f43f3135449095ea194b6de4d5125e461340/food-nutrition.swagger.json',\n    },\n    {\n      id: 9,\n      title: 'Email Verifier',\n      content:\n        'Validate email addresses in real-time. Make sure a mailbox really exists.',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/3673d646075f44b1733a82ed320cd9f7/raw/47a64f29ba14c6b38aae3798789637af62122b8d/emal-verifier.swagger.json',\n    },\n    {\n      id: 10,\n      title: 'Crunchbase',\n      content:\n        'Build powerful applications and integrate Crunchbase into your web and mobile applications with the REST API.',\n      tags: ['Verified'],\n      actions: ['link', 'navigate_next'],\n      swaggerUrl:\n        'https://gist.githubusercontent.com/i-Krypt/d110bf30753af937589b86908ad707cc/raw/88ed8a440ee983b404721189a11f69e279178a8f/cruncbase.swagger.json',\n    },\n  ];\n\n  //api utilization\n  getUtilizationData(): {\n    timestamp: string;\n    requests: number;\n    errors: number;\n    responseTime: number;\n  }[] {\n    return [\n      { timestamp: '2022-05-10', requests: 467, errors: 5, responseTime: 150 },\n      { timestamp: '2022-05-11', requests: 576, errors: 8, responseTime: 180 },\n      { timestamp: '2022-05-12', requests: 572, errors: 2, responseTime: 120 },\n      { timestamp: '2022-05-13', requests: 79, errors: 1, responseTime: 200 },\n      { timestamp: '2022-05-14', requests: 92, errors: 3, responseTime: 170 },\n      { timestamp: '2022-05-15', requests: 574, errors: 6, responseTime: 160 },\n      { timestamp: '2022-05-16', requests: 573, errors: 4, responseTime: 140 },\n      { timestamp: '2022-05-17', requests: 576, errors: 7, responseTime: 190 },\n    ];\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RedocService",
            "id": "injectable-RedocService-293de05c13e4eb163618073c3eddc5bc8e9f798a16786be3c880f7e8bfc5ee0034272bdeded49ce799d20af0a05f13adaaa44ab6b5253fbe8212389cc9982ad7",
            "file": "src/app/portal/services/redoc/redoc.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "documentation",
                    "args": [
                        {
                            "name": "specUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "container",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "specUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "container",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\ndeclare var Redoc: any;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RedocService {\n  documentation(specUrl: string, options: any, container: HTMLElement): void {\n    Redoc.init(specUrl, options, container);\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SnackbarServiceService",
            "id": "injectable-SnackbarServiceService-83f11d12e01c857ae29dc09a347b9039c5b6130713b563773bc57e6c0521b4d66f5635cff3cf683312fa4d54c7e4a21a488934987ce2f1b7e67532d96834e302",
            "file": "src/app/shared/snackbar/snackbar-service.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Close'"
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "3000"
                        },
                        {
                            "name": "config",
                            "type": "MatSnackBarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Close'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "3000",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "MatSnackBarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SnackbarServiceService {\n  constructor(private snackbar: MatSnackBar) {}\n\n  open(\n    message: string,\n    action: string = 'Close',\n    duration: number = 3000,\n    config?: MatSnackBarConfig\n  ): void {\n    const snackbarConfig: MatSnackBarConfig = {\n      duration,\n      ...config,\n    };\n    this.snackbar.open(message, action, snackbarConfig);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-625df3ab1ad98514cdceac9065391e39a204d2fe759d87d37e997a0622222004f22a8a24eb8606fd64ea6499aedd8db1bf08a8f35ff158863adb5e1ea0a78964",
            "file": "src/app/guards/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthenticationService } from '../authentication/services/authentication.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private authService: AuthenticationService,\n    private router: Router\n  ) {}\n\n  canActivate(): boolean {\n    // Check if the user is authenticated\n    const isAuthenticated = this.authService.isAuthenticated();\n\n    if (!isAuthenticated) {\n      // Redirect to the login page if not authenticated\n      this.router.navigate(['/login']);\n    }\n\n    return isAuthenticated;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ApiDocumentationComponent",
            "id": "component-ApiDocumentationComponent-e3451f5732a5211f3fb795a30551e841d215534029e00234ec7eacb69729a66e00d3902e183b9e3f3978b58659f41795237f8e8d7ea0dcb21ba897527ca324e1",
            "file": "src/app/portal/components/documentation-api/api-documentation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-api-documentation",
            "styleUrls": [
                "./api-documentation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./api-documentation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "id",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "swaggerUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "documentation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, Input } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DataService } from '../../services/module-data/data.service';\n\ndeclare const Redoc: any;\n@Component({\n  selector: 'app-api-documentation',\n  templateUrl: './api-documentation.component.html',\n  styleUrls: ['./api-documentation.component.scss'],\n})\nexport class ApiDocumentationComponent implements AfterViewInit {\n  @Input() id: number = 0;\n  @Input() swaggerUrl!: string;\n\n  constructor(\n    private element: ElementRef,\n    private route: ActivatedRoute,\n    private dataService: DataService\n  ) {}\n\n  ngAfterViewInit(): void {\n    const idParam = this.route.snapshot.paramMap.get('id');\n    if (idParam !== null) {\n      const id = +idParam;\n      const selectedCard = this.dataService.cardData.find(\n        (card) => card.id === id\n      );\n\n      if (selectedCard) {\n        this.swaggerUrl = selectedCard.swaggerUrl;\n        this.documentation();\n      } else {\n        console.error('Card with id ' + id + ' not found.');\n      }\n    } else {\n      console.error('ID parameter is null.');\n    }\n  }\n\n  documentation() {\n    const container = this.element.nativeElement.querySelector('#redoc');\n    if (this.swaggerUrl) {\n      Redoc.init(\n        this.swaggerUrl,\n        {\n          scrollYOffset: 60,\n          hideDownloadButton: true,\n        },\n        container\n      );\n    } else {\n      console.error('Swagger URL not provided.');\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".notice-primary {\n  background-color: gainsboro;\n  border-color: gainsboro;\n}\n\nsection {\n  margin-top: 90px;\n\n  @media (max-width: 600px) {\n    margin-top: 40px;\n  }\n}\n\n\n.notice {\n  border: 1px solid var(--gray-100);\n  border-radius: 8px;\n  // flex: 0 0 auto;\n  min-width: 275px;\n  padding: 16px 18px;\n  position: relative;\n  text-align: center;\n  width: 100%;\n\n  @media (min-width: 768px) {\n    .notice {\n      align-items: center;\n      display: inline-flex;\n    }\n  }\n\n}\n\n.mb-2 {\n  margin-bottom: 8px;\n}\n\n.mt-2 {\n  margin-top: 8px;\n}\n\n@media (min-width: 768px) {\n  .notice-message {\n    flex: 1 1 auto;\n  }\n}\n\n.notice-message {\n  color: #111111;\n  margin-bottom: -2px;\n  text-align: left;\n}\n\n.notice-body {\n  margin-top: -2px;\n}\n\n.docs-samples-notice {\n  position: relative;\n}\n\n.header {\n  margin: 45px 0 10px;\n}\n\n\n.redoc {\n  margin-top: 25px;\n}\n",
                    "styleUrl": "./api-documentation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<section>\n  <div id=\"redoc\" class=\"redoc\"></div>\n</section>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-336b896eb4d2710b7af697db28befc323efe03eee0d3904d4c72c0399becfdce1a5e9e2eb04a14c747ad094c81636e1a8a9b7c43c07b2635d8ebdd4955f416aa",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'ApiMonetization'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'ApiMonetization';\n\n  constructor(private titleService: Title) {\n    // this.titleService.setTitle($localize`${this.title}`);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  padding: 0 10%;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "BaseComponent",
            "id": "component-BaseComponent-4e8157868cac5f91a6449e8c50b2419fc7b32104a13e5e7d39d47c6dede42ecf6a13c01021c14e46e261939b160356de4277f98832a91ecd2c7184899a362c86",
            "file": "src/app/layout/components/base/base.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-base",
            "styleUrls": [
                "./base.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./base.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-base',\n  templateUrl: './base.component.html',\n  styleUrls: ['./base.component.scss']\n})\nexport class BaseComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  padding: 0 10%;\n}\n",
                    "styleUrl": "./base.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<app-navbar [userLoggedOut]=\"true\"></app-navbar>\n<div class=\"container\">\n  <app-homepage></app-homepage>\n</div>\n<app-footer></app-footer>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-86e2311c54fbca7431c12e070d0fd5b0ebe343eec0553a392f182ba0e04a8f86613233d26ee47718fd0e7a65078f580c76a1fcc928ce55de81193d6618025bc4",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 798,
                            "end": 811,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 799,
                                "end": 807,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 35,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-21b423e56d139888ffe11987653ebe8ae71c5e5f009b75d3693b6e0fb4721dcc9e3fa69bc8e5e62c5c78a5d426c3a78b710bb4f48ec1f6c53ef552f76beae077",
            "file": "src/app/portal/components/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "apiDocumentation",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "apiUtilization",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { DataService } from '../../services/module-data/data.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n})\nexport class DashboardComponent {\n  cardData: any[];\n\n  constructor(private router: Router, private dataService: DataService) {\n    this.cardData = this.dataService.cardData;\n  }\n\n  apiDocumentation(id: number) {\n    this.router.navigate(['/documentation', id]);\n  }\n\n  apiUtilization() {\n    this.router.navigate(['/utilization']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  margin-top: 64px;\n}\n\n.discover-grid {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 32px;\n  width: 100%;\n\n  @media (max-width: 1200px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n\n  @media (max-width: 900px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (max-width: 600px) {\n    grid-template-columns: 1fr;\n  }\n}\n\nmat-card {\n  height: 240px;\n}\n\nmat-card-title {\n  font-size: medium;\n  font-weight: 500;\n}\n\nmat-card-header {\n  display: flex;\n  justify-content: space-between;\n}\n\nmat-card-content {\n  margin-top: var(--spacing-8);\n  margin-bottom: var(--spacing-8);\n  flex-basis: 89px;\n  overflow: hidden;\n  flex-grow: 1;\n  position: relative;\n\n  .p {\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 20px;\n    overflow: hidden;\n  }\n\n}\n\n\nmat-card-actions {\n  display: flex;\n  justify-content: space-between;\n}\n\n.mat-mdc-standard-chip {\n  border-radius: 5px;\n}\n\n.action-icon:hover {\n  background-color: rgba(158, 158, 158, 0.2);\n}\n\n.action-icon:active {\n  background-color: rgba(158, 158, 158, 0.4);\n}\n\n\n.action-icon {\n  border-radius: 50%;\n  box-sizing: border-box;\n  cursor: pointer;\n  margin: 0 2px;\n  outline: none;\n  padding: 6px;\n  color: #A32A29;\n}\n\n.spacing {\n  margin-top: 0;\n}\n",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<section>\n  <app-search></app-search>\n  <h3 class=\"spacing\">Discover recommended APIs</h3>\n  <div class=\"discover-grid\">\n    <mat-card *ngFor=\"let data of cardData\">\n      <mat-card-header>\n        <mat-card-title>{{ data.title }}</mat-card-title>\n        <i class=\"material-icons action-icon\" role=\"button\" title=\"Bookmark\"\n          >bookmark_border</i\n        >\n      </mat-card-header>\n      <mat-card-content>\n        <p>\n          {{ data.content }}\n        </p>\n      </mat-card-content>\n      <mat-card-actions>\n        <mat-chip-listbox aria-label=\"api selection\">\n          <mat-chip-option>{{ data.tags }}</mat-chip-option>\n        </mat-chip-listbox>\n        <div>\n          <i\n            class=\"material-icons action-icon\"\n            role=\"button\"\n            title=\"More options\"\n            (click)=\"apiUtilization()\"\n            >link</i\n          >\n          <i\n            class=\"material-icons action-icon\"\n            role=\"button\"\n            title=\"More options\"\n            (click)=\"apiDocumentation(data.id)\"\n            >navigate_next</i\n          >\n        </div>\n      </mat-card-actions>\n    </mat-card>\n  </div>\n</section>\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-d3b71514c76ba84041e52ba3518b41c2ad8c44cb3375820315acc565aca8c1796c4d3caf07de33a05b74ea650db096f138fa4315ff873ec869e42848a5c3012b",
            "file": "src/app/layout/components/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss'],\n})\nexport class FooterComponent {\n  currentDate: Date = new Date();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../themes/var';\n\nmat-toolbar {\n  background-color: $theme-300;\n  padding: 40px;\n  color: $contrast-A100;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.mat-toolbar-row {\n  padding: 0 10%;\n  justify-content: space-between\n}\n",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<section>\n  <mat-toolbar>\n    <mat-toolbar-row>\n      <span class=\"material-icons\">api</span>\n      <span>Api Monetization</span>\n    </mat-toolbar-row>\n    <!-- <span>{{ currentDate | date : \"longDate\" }}</span> -->\n  </mat-toolbar>\n</section>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-cad94b233ec8e80ceb541e7972c5f9737e08237b4e137112f3987ca48ee0cce5c0d57798d41daa5d4d24d6bdbb2df1606ab68cca2aa0a1785e38f99f3cac0729",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HomepageComponent",
            "id": "component-HomepageComponent-90253dc1788c14dd33d27e7af3c9b8375633cf73f3e97031cebf28d5e7efbd19a0084e1b790d7e3847e611264681f4f29bc28b9ea8556f104df24b4735ecb2d7",
            "file": "src/app/layout/components/homepage/homepage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-homepage",
            "styleUrls": [
                "./homepage.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./homepage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dummyData",
                    "defaultValue": "[\n    {\n      title: 'Text generation',\n      description: 'Learn how to generate text and call functions',\n      backgroundColor: '#77100f',\n      icon: 'textsms',\n    },\n    {\n      title: 'Prompt engineering',\n      description: 'Learn best pracrices for prompt engineering',\n      backgroundColor: '#000000',\n      icon: 'integration_instructions',\n    },\n    {\n      title: 'Speech to text',\n      description: 'Learn how to turn audio into text',\n      backgroundColor: '#000000',\n      icon: 'graphic_eq',\n    },\n    {\n      title: 'Fine-tuning',\n      description: 'Learn how to train a model for your use case',\n      backgroundColor: '#881a19',\n      icon: 'model_training',\n    },\n    {\n      title: 'Image generation',\n      description: 'Learn how to generate or edit images',\n      backgroundColor: '#881a19',\n      icon: 'image',\n    },\n    {\n      title: 'Vision',\n      description: 'Learn how to process image inputs with GPT-4',\n      backgroundColor: '#000000',\n      icon: 'visibility',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "isSmallScreen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResize",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setScreenSize",
                    "args": [
                        {
                            "name": "windowWidth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "windowWidth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, HostListener } from '@angular/core';\n\n@Component({\n  selector: 'app-homepage',\n  templateUrl: './homepage.component.html',\n  styleUrls: ['./homepage.component.scss'],\n})\nexport class HomepageComponent implements OnInit {\n  dummyData = [\n    {\n      title: 'Text generation',\n      description: 'Learn how to generate text and call functions',\n      backgroundColor: '#77100f',\n      icon: 'textsms',\n    },\n    {\n      title: 'Prompt engineering',\n      description: 'Learn best pracrices for prompt engineering',\n      backgroundColor: '#000000',\n      icon: 'integration_instructions',\n    },\n    {\n      title: 'Speech to text',\n      description: 'Learn how to turn audio into text',\n      backgroundColor: '#000000',\n      icon: 'graphic_eq',\n    },\n    {\n      title: 'Fine-tuning',\n      description: 'Learn how to train a model for your use case',\n      backgroundColor: '#881a19',\n      icon: 'model_training',\n    },\n    {\n      title: 'Image generation',\n      description: 'Learn how to generate or edit images',\n      backgroundColor: '#881a19',\n      icon: 'image',\n    },\n    {\n      title: 'Vision',\n      description: 'Learn how to process image inputs with GPT-4',\n      backgroundColor: '#000000',\n      icon: 'visibility',\n    },\n  ];\n\n  isSmallScreen: boolean = false;\n\n  ngOnInit(): void {\n    this.setScreenSize(window.innerWidth);\n  }\n\n  @HostListener('window:resize', ['$event'])\n  onResize(event: Event) {\n    this.setScreenSize((event.target as Window).innerWidth);\n  }\n\n  private setScreenSize(windowWidth: number): void {\n    if (windowWidth <= 600) {\n      this.isSmallScreen = true;\n    } else if (windowWidth > 600 && windowWidth <= 1024) {\n      this.isSmallScreen = false;\n    } else {\n      this.isSmallScreen = false;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../themes/var';\n\n// mat-grid-list {\n//   padding-bottom: 0;\n//   display: flex;\n\n//   .content-container {\n//     text-align: justify;\n//   }\n// }\n\nmat-card-actions {\n  padding: 20px 16px;\n}\n\n// mat-card-content {\n//   padding-bottom: 20px;\n// }\n\nmat-card {\n  padding: 16px;\n}\n\n// api list section\nsection {\n  .api-grid {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    gap: 32px;\n    width: 100%;\n\n    @media (max-width: 700px) {\n      grid-template-columns: 1fr;\n    }\n  }\n\n  .icon-item {\n    display: flex;\n    align-items: flex-start;\n    border-radius: 6px;\n    min-width: 0;\n  }\n\n  .icon-item-title {\n    font-weight: 700;\n    color: #221F1F;\n    display: inline-block;\n    margin-bottom: 2px;\n    margin-top: 3px;\n    transition: color .15s;\n  }\n\n  .icon-item-icon {\n    flex: 0 0 auto;\n    font-size: 24px;\n    line-height: 0px;\n    padding: 15px;\n    border-radius: 8px;\n  }\n\n  .material-icons {\n    color: #FFFFFF;\n\n  }\n\n  .icon-item-right {\n    flex: 1 1 auto;\n    min-width: 0;\n    padding-left: 16px;\n  }\n}\n\n\n// strategies\n.strategies {\n  margin-bottom: 40px;\n}\n\n.accord {\n  background-color: $contrast-A100;\n  border-radius: 5px;\n  padding: 30px;\n  margin-top: 90px;\n\n  h3 {\n    color: $contrast-A400;\n  }\n\n  p {\n    color: $contrast-800;\n  }\n}\n\n.container {\n  display: flex;\n  gap: 25px;\n  margin: 25px 0 25px;\n\n  .content-side {\n    flex: 4;\n    text-align: justify;\n  }\n\n  .card-side {\n    flex: 2;\n  }\n\n  @media (max-width: 767px) {\n    flex-direction: column;\n  }\n}\n\n.api-monetization-row {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  align-items: center;\n  opacity: 0;\n  /* Start with 0 opacity */\n  animation: fadeIn 1s ease-out forwards;\n\n  @media (max-width: 767px) {\n    display: flex;\n    flex-direction: column-reverse;\n  }\n}\n\n.api-image {\n  max-width: 100%;\n}\n\n.api-paragraph {\n  text-align: justify;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n}\n",
                    "styleUrl": "./homepage.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"accord\">\n  <h3>Unlock the Power of API Monetization</h3>\n  <p>\n    Maximize your revenue by effectively monetizing your APIs. Explore new\n    opportunities and enhance your business strategy.\n  </p>\n</div>\n\n<div class=\"container\">\n  <div class=\"content-side\">\n    <h3>What is API Monetization ?</h3>\n    <P\n      >API monetization is a relatively new business practice, which businesses\n      use to increase their revenue as part of their overall API management\n      plan. By strategically charging fees for certain API endpoints, your API\n      management plan can have a positive impact on your business’s overall\n      revenue. In traditional business models, monetization is done by offering\n      a service directly to consumers or businesses. With API monetization\n      models, businesses sell API access directly to software developer teams.\n      The developers then use the API to access data or perform other\n      actions.</P\n    >\n  </div>\n\n  <div class=\"card-side\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>Build anything with APIs, faster. </mat-card-title>\n      </mat-card-header>\n      <mat-card-content>\n        Build anything with APIs, faster. Discover, evaluate, and integrate with\n        any API. RapidAPI is the world’s largest API Hub with over 4 Million\n        developers and 35,000 APIs.\n      </mat-card-content>\n      <mat-card-actions>\n        <button\n          mat-flat-button\n          color=\"primary\"\n          style=\"width: 100%; display: block\"\n        >\n          Browse APIs\n        </button>\n      </mat-card-actions>\n    </mat-card>\n  </div>\n</div>\n\n<!-- <mat-grid-list [cols]=\"isSmallScreen ? 1 : 3\" gutterSize=\"60\">\n  <mat-grid-tile [colspan]=\"isSmallScreen ? 1 : 2\">\n    <div class=\"content-container\">\n      <h3>What is API Monetization ?</h3>\n      <P\n        >API monetization is a relatively new business practice, which\n        businesses use to increase their revenue as part of their overall API\n        management plan. By strategically charging fees for certain API\n        endpoints, your API management plan can have a positive impact on your\n        business’s overall revenue. In traditional business models, monetization\n        is done by offering a service directly to consumers or businesses. With\n        API monetization models, businesses sell API access directly to software\n        developer teams. The developers then use the API to access data or\n        perform other actions.</P\n      >\n    </div>\n  </mat-grid-tile>\n  <mat-grid-tile>\n    <mat-card class=\"gradient-card\">\n      <mat-card-header>\n        <mat-card-title>Build anything with APIs, faster. </mat-card-title>\n      </mat-card-header>\n      <mat-card-content>\n        Build anything with APIs, faster. Discover, evaluate, and integrate with\n        any API. RapidAPI is the world’s largest API Hub with over 4 Million\n        developers and 35,000 APIs.\n      </mat-card-content>\n      <mat-card-actions>\n        <button\n          mat-flat-button\n          color=\"primary\"\n          style=\"width: 100%; display: block\"\n        >\n          Browse APIs\n        </button>\n      </mat-card-actions>\n    </mat-card>\n  </mat-grid-tile>\n</mat-grid-list> -->\n\n<!-- list the apis -->\n<section>\n  <h3 style=\"margin: 0 0 40px\">Explore the available APIs</h3>\n  <div class=\"api-grid\">\n    <div *ngFor=\"let data of dummyData\">\n      <div class=\"icon-item\">\n        <div\n          class=\"icon-item-icon\"\n          [ngStyle]=\"{ 'background-color': data.backgroundColor }\"\n        >\n          <span class=\"material-icons\">\n            {{ data.icon }}\n          </span>\n        </div>\n        <div class=\"icon-item-right\">\n          <div class=\"icon-item-title\">{{ data.title }}</div>\n          <div class=\"icon-item-desc body-small\">\n            {{ data.description }}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n\n<!-- strategies section -->\n<div class=\"strategies\">\n  <h3 style=\"margin-top: 40px\">Strategies to Monetize the API</h3>\n  <div class=\"api-monetization-row\">\n    <img\n      src=\"../../../../assets/absurd.design - Chapter 1 - 04.png\"\n      alt=\"API Monetization Image\"\n      class=\"api-image\"\n    />\n    <p class=\"api-paragraph\">\n      In the ever-evolving digital landscape, effective API monetization\n      strategies are indispensable. Tailoring tiered subscription plans allows\n      for personalized access and feature options. A freemium model, offering\n      basic services for free while charging for premium features, attracts\n      diverse developer engagement. Strategic partnerships expand API reach,\n      creating mutually beneficial business opportunities. Embracing these\n      approaches not only unlocks varied revenue streams but also cultivates\n      innovation within the dynamic digital ecosystem.\n    </p>\n  </div>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-2d85b9a8f03631c8fdb591482fb0eacafae584e95721ac0820871f4c9af5840a9d20b53faaa98efec804ea1175dfa1b0745da6fb4b0818f02887c5f380a386cd",
            "file": "src/app/authentication/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "horizontalPosition",
                    "defaultValue": "'end'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "loggingIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "passwordHidden",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "verticalPosition",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "attemptLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "togglePasswordVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatSnackBarConfig } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\nimport { SnackbarServiceService } from 'src/app/shared/snackbar/snackbar-service.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  loginForm!: FormGroup;\n  submitted = false;\n  passwordHidden = true;\n  horizontalPosition = 'end';\n  verticalPosition = 'top';\n  loggingIn: Boolean = false;\n\n  constructor(\n    private router: Router,\n    private _formBuilder: FormBuilder,\n    private snackbarService: SnackbarServiceService\n  ) {}\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  initForm() {\n    this.loginForm = this._formBuilder.group({\n      username: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n    });\n  }\n\n  attemptLogin() {\n    this.submitted = true;\n    this.loggingIn = true;\n    if (this.loginForm.invalid) {\n      return;\n    }\n    const config: MatSnackBarConfig = {\n      horizontalPosition: 'center',\n      verticalPosition: 'top',\n    };\n    this.snackbarService.open('Logged in successfully', 'Close', 2000, config);\n    setTimeout(() => {\n      this.router.navigate(['/portal']);\n      this.loggingIn = false;\n      this.loginForm.reset();\n    }, 2500);\n  }\n\n  get f() {\n    return this.loginForm.controls;\n  }\n\n  togglePasswordVisibility() {\n    this.passwordHidden = !this.passwordHidden;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login {\n  display: flex;\n  height: 100vh;\n\n  .background {\n    flex: 1.7;\n    background-color: #A32A29;\n    color: #ffffff;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n\n    .img {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n\n      @media (max-width: 768px) {\n        display: none;\n      }\n    }\n  }\n\n  .login-logo {\n    margin-bottom: 20px;\n  }\n\n  .login-form {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 20px;\n    box-sizing: border-box;\n  }\n\n  .login-form form {\n    max-width: 400px;\n    width: 100%;\n  }\n\n  .responsive {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .mat-mdc-unelevated-button.mat-mdc-button-base {\n    width: 250px;\n    height: 53px;\n  }\n\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n\n    .background {\n      order: 2;\n      flex-basis: 30%;\n      text-align: center;\n      align-items: center;\n    }\n\n    .login-form {\n      order: 1;\n      flex-basis: 70%;\n      text-align: center;\n    }\n  }\n}\n\n// logging in pulsating effect\n\nmat-flat-button {\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n\n  .logging-in {\n    animation: pulse 1.5s infinite;\n  }\n}\n\n\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n  }\n\n  50% {\n    transform: scale(1.1);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n}\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbarService",
                        "type": "SnackbarServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbarService",
                        "type": "SnackbarServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "f": {
                    "name": "f",
                    "getSignature": {
                        "name": "f",
                        "type": "",
                        "returnType": "",
                        "line": 55
                    }
                }
            },
            "templateData": "<div class=\"login\">\n  <div class=\"background\">\n    <div>\n      <h1>Find and Connect to Thousands of APIs</h1>\n      <p>Enter your credentials to log in.</p>\n    </div>\n    <div class=\"img\">\n      <img\n        mat-card-image\n        width=\"50%\"\n        src=\"../../../../assets/absurd.design - Chapter 1 - 32.png\"\n        alt=\"login-logo\"\n      />\n    </div>\n  </div>\n\n  <div class=\"login-form\">\n    <!-- <div>\n      <h3>Sign In</h3>\n    </div> -->\n    <form\n      [formGroup]=\"loginForm\"\n      (ngSubmit)=\"attemptLogin()\"\n      class=\"responsive\"\n    >\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Username or email</mat-label>\n        <input\n          matInput\n          placeholder=\"submit your username\"\n          formControlName=\"username\"\n        />\n        <mat-icon matSuffix>person</mat-icon>\n      </mat-form-field>\n      <div *ngIf=\"f['username'].invalid && submitted\">\n        <mat-error *ngIf=\"f['username'].errors?.['required']\"\n          >Username is required!</mat-error\n        >\n        <mat-error *ngIf=\"f['username'].errors?.['email']\"\n          >Provide a valid email!</mat-error\n        >\n      </div>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Password</mat-label>\n        <input\n          matInput\n          placeholder=\"******\"\n          formControlName=\"password\"\n          [type]=\"passwordHidden ? 'password' : 'text'\"\n        />\n        <button\n          type=\"button\"\n          mat-icon-button\n          matSuffix\n          (click)=\"togglePasswordVisibility()\"\n        >\n          <mat-icon>{{\n            passwordHidden ? \"visibility_off\" : \"visibility\"\n          }}</mat-icon>\n        </button>\n      </mat-form-field>\n      <div *ngIf=\"f['password'].invalid && submitted\">\n        <mat-error *ngIf=\"f['password'].errors?.['required']\"\n          >Password is required!</mat-error\n        >\n        <!-- <pre>{{ f[\"password\"].errors | json }}</pre> -->\n        <mat-error *ngIf=\"f['password'].errors?.['minlength']\"\n          >Provide at least 6 characters!</mat-error\n        >\n      </div>\n      <div>\n        <button mat-flat-button color=\"primary\" [class.logging-in]=\"loggingIn\">\n          <span *ngIf=\"!loggingIn\">Login</span>\n          <span *ngIf=\"loggingIn\">Logging In...</span>\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-76a802a7c49bec4d570cd075947c44cc4374b6ed87a142b6e558f0a55427e84e0f834ac3f48fc813464e102276cad8f9fa457753ae8295693916b63b50859e8c",
            "file": "src/app/layout/components/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navbar",
            "styleUrls": [
                "./navbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "userLoggedOut",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "accountPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "home",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss'],\n})\nexport class NavbarComponent {\n  @Input() userLoggedOut = false;\n\n  constructor(private router: Router) {}\n\n  login() {\n    this.router.navigate(['/auth/login']);\n  }\n\n  signUp() {\n    this.router.navigate(['/auth/signup']);\n  }\n\n  home() {\n    this.router.navigate(['/portal']);\n  }\n\n  accountPage() {\n    this.router.navigate(['/account']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-toolbar {\n  background-color: #FFFFFF;\n  box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);\n  position: fixed;\n  z-index: 1000;\n}\n\n\n\n.mat-toolbar-row {\n  padding: 0 10%;\n  justify-content: space-between\n}\n\n\n.spacer {\n  display: flex;\n  gap: 12px;\n  justify-content: space-between\n}\n\n.mat-mdc-button.mat-mdc-button-base {\n  gap: 5px;\n}\n",
                    "styleUrl": "./navbar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<mat-toolbar>\n  <mat-toolbar-row>\n    <a (click)=\"home()\" style=\"cursor: pointer\">\n      <span>API Monetization</span>\n    </a>\n    <ng-container *ngIf=\"userLoggedOut; else userLoggedIn\">\n      <div class=\"spacer\">\n        <button mat-flat-button color=\"primary\" (click)=\"login()\">Login</button>\n        <button mat-stroked-button (click)=\"signUp()\">Sign up</button>\n      </div>\n    </ng-container>\n    <ng-template #userLoggedIn>\n      <div class=\"spacer\">\n        <button mat-button color=\"primary\" (click)=\"accountPage()\">\n          <span class=\"material-icons\"> account_circle </span>\n          Account\n        </button>\n      </div>\n    </ng-template>\n  </mat-toolbar-row>\n</mat-toolbar>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-d32b0f19628254ea3fc5526c4d4564ada1cc83cf936759006d90a46f5874b02a3359e331bddda20b22e74a616a6443c660602ba74dd38ebe1160759e0de6f7ba",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PortalComponent",
            "id": "component-PortalComponent-bf53c9b9c806337da0509d2ba977867e1afc507124d4470992a1249bc393163c1bd09837a3ac99edb152504ff82da9313a60f2ed5fa962d990529f9bf7f7812e",
            "file": "src/app/portal/components/base/portal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-portal",
            "styleUrls": [
                "./portal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./portal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-portal',\n  templateUrl: './portal.component.html',\n  styleUrls: ['./portal.component.scss']\n})\nexport class PortalComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  padding: 0 10%;\n}\n",
                    "styleUrl": "./portal.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<app-navbar [userLoggedOut]=\"false\"></app-navbar>\n<div class=\"container\">\n  <router-outlet></router-outlet>\n  <!-- <app-dashboard></app-dashboard> -->\n</div>\n"
        },
        {
            "name": "RegistrationComponent",
            "id": "component-RegistrationComponent-1c9f296c9b128e1ca0a447453adb33feab33965e42b6d67922145749cfe7af441d55491e06fd2d56a55a660039af2b14c9bf19e8a7ef770a4a61dd5a81938c8e",
            "file": "src/app/authentication/components/registration/registration.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-registration",
            "styleUrls": [
                "./registration.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./registration.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "confirmPasswordHidden",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "passwordHidden",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "signedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "togglePasswordVisibility",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UserSignUp } from '../../interfaces/user';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { SnackbarServiceService } from 'src/app/shared/snackbar/snackbar-service.service';\nimport { MatSnackBarConfig } from '@angular/material/snack-bar';\nimport { config } from 'rxjs';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.scss'],\n})\nexport class RegistrationComponent implements OnInit {\n  registerForm!: FormGroup;\n  passwordHidden: Boolean = true;\n  confirmPasswordHidden: Boolean = true;\n  signedIn: Boolean = false;\n\n  constructor(\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private snackbar: SnackbarServiceService\n  ) {}\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  initForm() {\n    this.registerForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', Validators.required],\n    });\n  }\n\n  register() {\n    this.signedIn = true;\n    const config: MatSnackBarConfig = {\n      horizontalPosition: 'center',\n      verticalPosition: 'top',\n    };\n    if (this.registerForm.valid) {\n      this.snackbar.open('User registered successfully', 'Close', 2000, config);\n      setTimeout(() => {\n        this.router.navigate(['/portal']);\n        this.signedIn = false;\n        this.registerForm.reset();\n      }, 2500);\n    }\n  }\n\n  togglePasswordVisibility(field: string) {\n    if (field === 'password') {\n      this.passwordHidden = !this.passwordHidden;\n    } else if (field === 'confirmPassword') {\n      this.confirmPasswordHidden = !this.confirmPasswordHidden;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".signUp {\n  display: flex;\n  height: 100vh;\n\n  .background {\n    flex: 1.7;\n    background-color: #A32A29;\n    color: #ffffff;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n\n    .img {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n\n      @media (max-width: 768px) {\n        display: none;\n      }\n    }\n  }\n\n  .login-logo {\n    margin-bottom: 20px;\n  }\n\n  .signUp-form {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 20px;\n    box-sizing: border-box;\n\n  }\n\n  .signUp-form form {\n    max-width: 400px;\n    width: 100%;\n  }\n\n  .reg-responsive {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .mat-mdc-unelevated-button.mat-mdc-button-base {\n    width: 250px;\n    height: 53px;\n  }\n\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n\n    .background {\n      order: 2;\n      flex-basis: 30%;\n      text-align: center;\n      align-items: center;\n    }\n\n    .signUp-form {\n      order: 1;\n      flex-basis: 70%;\n      text-align: center;\n    }\n  }\n}\n",
                    "styleUrl": "./registration.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"signUp\">\n  <div class=\"background\">\n    <div>\n      <h1>Find and Connect to Thousands of APIs</h1>\n      <p>Enter your credentials to create an account.</p>\n    </div>\n    <div class=\"img\">\n      <img\n        mat-card-image\n        width=\"50%\"\n        src=\"../../../../assets/absurd.design - Chapter 1 - 32.png\"\n        alt=\"login-logo\"\n      />\n    </div>\n  </div>\n\n  <div class=\"signUp-form\">\n    <!-- <div>\n        <h3>Sign Up</h3>\n      </div> -->\n    <form\n      [formGroup]=\"registerForm\"\n      (ngSubmit)=\"register()\"\n      class=\"reg-responsive\"\n    >\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Username</mat-label>\n        <input\n          matInput\n          placeholder=\"Placeholder\"\n          type=\"text\"\n          formControlName=\"username\"\n        />\n        <mat-icon matSuffix>person</mat-icon>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Email</mat-label>\n        <input\n          matInput\n          placeholder=\"Placeholder\"\n          type=\"email\"\n          formControlName=\"email\"\n        />\n        <mat-icon matSuffix>email</mat-icon>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Password</mat-label>\n        <input\n          matInput\n          placeholder=\"******\"\n          [type]=\"passwordHidden ? 'password' : 'text'\"\n          formControlName=\"password\"\n        />\n        <button\n          type=\"button\"\n          mat-icon-button\n          matSuffix\n          (click)=\"togglePasswordVisibility('password')\"\n        >\n          <mat-icon>{{\n            passwordHidden ? \"visibility_off\" : \"visibility\"\n          }}</mat-icon>\n        </button>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Confirm Password</mat-label>\n        <input\n          matInput\n          placeholder=\"******\"\n          [type]=\"confirmPasswordHidden ? 'password' : 'text'\"\n          formControlName=\"confirmPassword\"\n        />\n        <button\n          type=\"button\"\n          mat-icon-button\n          matSuffix\n          (click)=\"togglePasswordVisibility('confirmPassword')\"\n        >\n          <mat-icon>{{\n            confirmPasswordHidden ? \"visibility_off\" : \"visibility\"\n          }}</mat-icon>\n        </button>\n      </mat-form-field>\n\n      <div>\n        <button\n          mat-flat-button\n          color=\"primary\"\n          [disabled]=\"registerForm.invalid\"\n        >\n          <span *ngIf=\"!signedIn\">Register</span>\n          <span *ngIf=\"signedIn\">Signing In...</span>\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n"
        },
        {
            "name": "SearchComponent",
            "id": "component-SearchComponent-852be2d17639dceeffc050383cfe6cf0fd263bb4134d40a00b10888d043d42a94d43b45138a45fc32e64fbf547ead073250907a52fe8bb54584bb3c4cd66c4fa",
            "file": "src/app/portal/components/search/search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search",
            "styleUrls": [
                "./search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "filteredCardData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "formCtrl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "formFilterCtrl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "filterCardData",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { DataService } from '../../services/module-data/data.service';\nimport { FormControl } from '@angular/forms';\nimport { startWith } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.scss'],\n})\nexport class SearchComponent implements OnInit {\n  cardData!: any[];\n  filteredCardData!: any[];\n\n  formCtrl = new FormControl();\n  formFilterCtrl = new FormControl();\n\n  constructor(private dataService: DataService) {}\n  ngOnInit(): void {\n    this.cardData = this.dataService.cardData;\n    this.formFilterCtrl.valueChanges.pipe(startWith('')).subscribe((value) => {\n      this.filteredCardData = this.filterCardData(value);\n    });\n  }\n\n  private filterCardData(value: string): any[] {\n    const filterValue = value.toLowerCase();\n    return this.cardData.filter(\n      (data) =>\n        data.title.toLowerCase().includes(filterValue) ||\n        data.content.toLowerCase().includes(filterValue)\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-form-field {\n  margin-top: 1.5em;\n}\n",
                    "styleUrl": "./search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field appearance=\"outline\">\n  <mat-select\n    [formControl]=\"formCtrl\"\n    placeholder=\"Search for APIs\"\n    #singleSelect\n  >\n    <mat-option>\n      <ngx-mat-select-search\n        [formControl]=\"formFilterCtrl\"\n      ></ngx-mat-select-search>\n    </mat-option>\n    <mat-option *ngFor=\"let data of filteredCardData\" [value]=\"data\">\n      {{ data.title }}\n    </mat-option>\n  </mat-select>\n</mat-form-field>\n"
        },
        {
            "name": "UserAccountComponent",
            "id": "component-UserAccountComponent-867cf67dac22b7f85d7ee2637b60ea6ea924e6045719f6aca1fcade33ba54eadb5ebf31d3687f84e2b1069729d25c718c2896934f9513ee8cc8435c19fed1e47",
            "file": "src/app/portal/components/user-account/user-account.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-account",
            "styleUrls": [
                "./user-account.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-account.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiKey",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "dataSource",
                    "defaultValue": "this.generateDummyData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApiKeys[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "[\n    'apiName',\n    'apiKey',\n    'generatedDate',\n    'revoked',\n    'actions',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "copyApiKey",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "generateApiKey",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "generateDummyData",
                    "args": [],
                    "optional": false,
                    "returnType": "ApiKeys[]",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "generateRandomKey",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "revokeApiKey",
                    "args": [
                        {
                            "name": "apiKey",
                            "type": "ApiKeys",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "apiKey",
                            "type": "ApiKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\nimport { ApiKeys } from '../../interfaces/api-keys';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-user-account',\n  templateUrl: './user-account.component.html',\n  styleUrls: ['./user-account.component.scss'],\n})\nexport class UserAccountComponent {\n  apiKey: string = '';\n  dataSource: ApiKeys[] = this.generateDummyData();\n  displayedColumns: string[] = [\n    'apiName',\n    'apiKey',\n    'generatedDate',\n    'revoked',\n    'actions',\n  ];\n\n  private router = inject(Router);\n\n  generateApiKey() {\n    this.apiKey = this.generateRandomKey();\n  }\n\n  generateDummyData(): ApiKeys[] {\n    const dummyData: ApiKeys[] = [];\n    for (let i = 1; i <= 5; i++) {\n      const apiKey: ApiKeys = {\n        apiName: `Api ${i}`,\n        apiKey: `API_KEY_${i}`,\n        generatedDate: new Date(),\n        revoked: false,\n      };\n\n      dummyData.push(apiKey);\n    }\n\n    return dummyData;\n  }\n\n  copyApiKey() {\n    const apiKeyField = document.getElementById('api-key') as HTMLInputElement;\n    apiKeyField.select();\n    document.execCommand('copy');\n  }\n\n  private generateRandomKey(): string {\n    const characters =\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const length = 32;\n    let apiKey = '';\n\n    for (let i = 0; i < length; i++) {\n      apiKey += characters.charAt(\n        Math.floor(Math.random() * characters.length)\n      );\n    }\n\n    return apiKey;\n  }\n\n  revokeApiKey(apiKey: ApiKeys) {\n    apiKey.revoked = true;\n  }\n\n  logout() {\n    this.router.navigate(['/']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../themes/var';\n\nmat-card {\n  background-color: $theme-A400;\n  margin-top: 85px;\n\n  // mat-card-title {\n  //   color: $contrast-400;\n  // }\n\n  // mat-card-subtitle {\n  //   color: $contrast-800;\n  // }\n\n  .example-header-image {\n    background-image: url('../../../../assets/user-image.jpg');\n    background-size: cover;\n  }\n\n  mat-form-field {\n    width: 32%;\n    // color: $contrast-400;\n\n    @media (max-width: 767px) {\n      width: 100%;\n    }\n  }\n\n  .disabled-icon {\n    pointer-events: none;\n    opacity: 0.5;\n  }\n\n  .genKey {\n    display: flex;\n    gap: 10px;\n    align-items: baseline;\n\n    @media (max-width: 767px) {\n      display: block;\n    }\n  }\n\n  button {\n\n    @media (max-width: 767px) {\n      width: 100%;\n    }\n  }\n\n}\n\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px;\n}\n\n.header-user {\n  display: flex;\n  flex-direction: column;\n  padding-left: 10px;\n}\n\n.header-left,\n.header-right {\n  display: flex;\n  align-items: center;\n}\n\n\ntable {\n  margin-top: 25px;\n}\n",
                    "styleUrl": "./user-account.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-card>\n  <div class=\"header\">\n    <div class=\"header-left\">\n      <div mat-card-avatar class=\"example-header-image\"></div>\n      <div class=\"header-user\">\n        <mat-card-title>Test User</mat-card-title>\n        <mat-card-subtitle>Profile</mat-card-subtitle>\n      </div>\n    </div>\n\n    <div class=\"header-right\">\n      <button mat-flat-button color=\"primary\" (click)=\"logout()\">\n        Log Out\n      </button>\n    </div>\n  </div>\n\n  <mat-card-content>\n    <mat-card-subtitle>Generate and manage API keys</mat-card-subtitle>\n    <div class=\"genKey\">\n      <mat-form-field appearance=\"outline\">\n        <input\n          matInput\n          type=\"text\"\n          id=\"api-key\"\n          [(ngModel)]=\"apiKey\"\n          [disabled]=\"!apiKey\"\n          readonly\n        />\n        <mat-icon\n          matSuffix\n          matTooltip=\"Copy the key\"\n          (click)=\"copyApiKey()\"\n          [ngClass]=\"{ 'disabled-icon': !apiKey }\"\n          >content_copy</mat-icon\n        >\n      </mat-form-field>\n      <button mat-flat-button color=\"accent\" (click)=\"generateApiKey()\">\n        Generate API Key\n      </button>\n    </div>\n  </mat-card-content>\n</mat-card>\n\n<!-- api key details -->\n<table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n  <!-- ApiName Column -->\n  <ng-container matColumnDef=\"apiName\">\n    <th mat-header-cell *matHeaderCellDef>API</th>\n    <td mat-cell *matCellDef=\"let element\">{{ element.apiName }}</td>\n  </ng-container>\n\n  <!-- API Key Column -->\n  <ng-container matColumnDef=\"apiKey\">\n    <th mat-header-cell *matHeaderCellDef>API Key</th>\n    <td mat-cell *matCellDef=\"let element\">{{ element.apiKey }}</td>\n  </ng-container>\n\n  <!-- Generated Date Column -->\n  <ng-container matColumnDef=\"generatedDate\">\n    <th mat-header-cell *matHeaderCellDef>Generated Date</th>\n    <td mat-cell *matCellDef=\"let element\">\n      {{ element.generatedDate | date : \"short\" }}\n    </td>\n  </ng-container>\n\n  <!-- Revoked Column -->\n  <ng-container matColumnDef=\"revoked\">\n    <th mat-header-cell *matHeaderCellDef>Revoked</th>\n    <td mat-cell *matCellDef=\"let element\">\n      <span *ngIf=\"element.revoked; else notRevoked\">Yes</span>\n      <ng-template #notRevoked>No</ng-template>\n    </td>\n  </ng-container>\n\n  <!-- Actions Column -->\n  <ng-container matColumnDef=\"actions\">\n    <th mat-header-cell *matHeaderCellDef>Actions</th>\n    <td mat-cell *matCellDef=\"let element\">\n      <button\n        mat-button\n        color=\"primary\"\n        *ngIf=\"!element.revoked\"\n        (click)=\"revokeApiKey(element)\"\n      >\n        Revoke\n      </button>\n      <span *ngIf=\"element.revoked\">Revoked</span>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>\n"
        },
        {
            "name": "UtilizationApiComponent",
            "id": "component-UtilizationApiComponent-a67441717e53bff4b9dc2345da397c9c976590b7113970e5c04164b78bdba440ae12d93d57d7f4d5e31fea8b2ac36ce25d2893aad42cd32d08cfe90e47ec1535",
            "file": "src/app/portal/components/utilization-api/utilization-api.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-utilization-api",
            "styleUrls": [
                "./utilization-api.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./utilization-api.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "chartService",
                    "defaultValue": "inject(DataService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, inject } from '@angular/core';\nimport Chart from 'chart.js/auto';\nimport { DataService } from '../../services/module-data/data.service';\n\n@Component({\n  selector: 'app-utilization-api',\n  templateUrl: './utilization-api.component.html',\n  styleUrls: ['./utilization-api.component.scss'],\n})\nexport class UtilizationApiComponent implements AfterViewInit {\n  chart: any;\n\n  private chartService = inject(DataService);\n\n  ngAfterViewInit(): void {\n    this.createChart();\n  }\n\n  createChart() {\n    const utilizationData = this.chartService.getUtilizationData();\n\n    const labels = utilizationData.map((entry) => entry.timestamp);\n    const requestDataset = utilizationData.map((entry) => entry.requests);\n    const errorsDataset = utilizationData.map((entry) => entry.errors);\n    const responseTimeDataset = utilizationData.map(\n      (entry) => entry.responseTime\n    );\n\n    this.chart = new Chart('MyChart', {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label: 'API Requests',\n            data: requestDataset,\n            backgroundColor: '#2F9803',\n            tension: 0.1,\n          },\n          {\n            label: 'Error Rates',\n            data: errorsDataset,\n            backgroundColor: '#FF0000',\n            tension: 0.1,\n          },\n          {\n            label: 'Response Times',\n            data: responseTimeDataset,\n            backgroundColor: '#0000FF',\n            tension: 0.1,\n          },\n        ],\n      },\n      options: {\n        aspectRatio: 2.5,\n      },\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./utilization-api.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<section style=\"margin-top: 85px\">\n  <h3>API Integration Overview</h3>\n  <canvas id=\"MyChart\"></canvas>\n</section>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-64ce2b86c4cd82951d582ea4f6b83bace898223ffd28d3376c514b991b4fc89593dd5dcf84e97350d241f2bd03b9eb7ad9903114d25e4a2209aaee08ce3499fe",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from '../material.module';\nimport { AuthenticationModule } from './authentication/authentication.module';\nimport { LayoutModule } from './layout/layout.module';\nimport { PortalModule } from './portal/portal.module';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    AuthenticationModule,\n    LayoutModule,\n    PortalModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AuthenticationModule"
                        },
                        {
                            "name": "LayoutModule"
                        },
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "PortalModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-4ea319348c85344461aa15457412bc02564b8dac11f5d09c0a3a43a8968b2e73784f6f1b5bbf22d1f0c8dfeaaca32957e9ecf4d350cc0ae887bc7a327a8c7290",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BaseComponent } from './layout/components/base/base.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BaseComponent,\n  },\n  {\n    path: 'auth',\n    loadChildren: () =>\n      \"import('./authentication/authentication.module').then(\\\n        (m) => m.AuthenticationModule\\\n      )\",\n  },\n  {\n    path: 'portal',\n    loadChildren: () =>\n      \"import('./portal/portal.module').then((m) => m.PortalModule)\",\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthenticationModule",
            "id": "module-AuthenticationModule-e91986fd595eb9938abe34c09ef45561d9a40a49c584527c69bb9d4aed1cc7e820bfdece5e0ec289d996a937bbffcc00a022627e42fd698e4bec129c040cbe58",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/authentication/authentication.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthenticationRoutingModule } from './authentication-routing.module';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegistrationComponent } from './components/registration/registration.component';\nimport { MaterialModule } from 'src/material.module';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [LoginComponent, RegistrationComponent],\n  imports: [\n    CommonModule,\n    AuthenticationRoutingModule,\n    MaterialModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class AuthenticationModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "RegistrationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthenticationRoutingModule"
                        },
                        {
                            "name": "MaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthenticationRoutingModule",
            "id": "module-AuthenticationRoutingModule-14581afcf27bf452b857a1d9301a59f19b76cca6e7ccfaaf54e9950845212029c4b92fb17b129c14a494b63066732071ca1ce2e23694f7c214818aa8be273c46",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/authentication/authentication-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegistrationComponent } from './components/registration/registration.component';\nimport { AuthGuard } from '../guards/auth.guard';\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  {\n    path: 'signup',\n    component: RegistrationComponent,\n    // canActivate: [AuthGuard],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthenticationRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutModule",
            "id": "module-LayoutModule-224743757c592ab92336d85e5bc2f88edc8eef9bece7a570583dcd5ead5a6d2cfc564dfd23bc0201ca23939ebabf6bce934086c4e070bc4a555f8c6be2ce2282",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/layout/layout.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from 'src/material.module';\n\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { HomepageComponent } from './components/homepage/homepage.component';\nimport { FooterComponent } from './components/footer/footer.component';\nimport { BaseComponent } from './components/base/base.component';\n\n@NgModule({\n  declarations: [NavbarComponent, HomepageComponent, FooterComponent, BaseComponent],\n  imports: [CommonModule, MaterialModule],\n  exports: [NavbarComponent, HomepageComponent, FooterComponent],\n})\nexport class LayoutModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BaseComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "HomepageComponent"
                        },
                        {
                            "name": "NavbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "HomepageComponent"
                        },
                        {
                            "name": "NavbarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutRoutingModule",
            "id": "module-LayoutRoutingModule-ed67803de53ff604b7af0bcb953caab462542914f892835c0aae0bbdc582d7f9f69cf91a14b7d514e2af8105c5a666aa588181ca2fe6f5c6d6750618cff19fed",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/layout/layout-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BaseComponent } from './components/base/base.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { HomepageComponent } from './components/homepage/homepage.component';\nimport { FooterComponent } from './components/footer/footer.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BaseComponent,\n    children: [\n      { path: 'navbar', component: NavbarComponent },\n      { path: 'homepage', component: HomepageComponent },\n      { path: 'footer', component: FooterComponent },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LayoutRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "id": "module-MaterialModule-965e9726b5c655c7ef957fc0e1eeb093e5155255df39c5096e4fd69bc2e7c44bfa69f72a26c2346dd9ef430a959037db00fd1ab45545553b0f8b0182a0c39580",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/material.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n// *************** FORM CONTROLS ***************\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core'; //FROM ANGULAR CORE\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\n\n// *************** NAVIGATION ***************\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n\n// *************** LAYOUT ***************\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatListModule } from '@angular/material/list';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatTreeModule } from '@angular/material/tree';\n\n// *************** BUTTONS & INDICATORS ***************\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatRippleModule } from '@angular/material/core';\n\n// *************** POPUPS & MODALS ***************\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n// *************** DATA TABLE ***************\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\n\nconst materialModules = [\n  MatAutocompleteModule,\n  MatCheckboxModule,\n  MatDatepickerModule,\n  MatNativeDateModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatRadioModule,\n  MatSelectModule,\n  MatSliderModule,\n  MatSlideToggleModule,\n  MatMenuModule,\n  MatSidenavModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatDividerModule,\n  MatExpansionModule,\n  MatGridListModule,\n  MatListModule,\n  MatStepperModule,\n  MatTabsModule,\n  MatTreeModule,\n  MatButtonModule,\n  MatButtonToggleModule,\n  MatBadgeModule,\n  MatChipsModule,\n  MatIconModule,\n  MatProgressSpinnerModule,\n  MatProgressBarModule,\n  MatRippleModule,\n  MatBottomSheetModule,\n  MatDialogModule,\n  MatSnackBarModule,\n  MatTooltipModule,\n  MatPaginatorModule,\n  MatSortModule,\n  MatTableModule,\n];\n\n@NgModule({\n  imports: [...materialModules],\n  exports: [...materialModules],\n})\nexport class MaterialModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PortalModule",
            "id": "module-PortalModule-13cc48b26d4a7070307ea27abd5eab132155b7c4b07e654cab1beeee3aef3352386593e602e3606ada23a48b87457c233f7ced76feaa98bc3e6ab0d1d3c5fe8b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/portal/portal.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PortalRoutingModule } from './portal-routing.module';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { PortalComponent } from './components/base/portal.component';\nimport { LayoutModule } from '../layout/layout.module';\nimport { MaterialModule } from 'src/material.module';\nimport { ApiDocumentationComponent } from './components/documentation-api/api-documentation.component';\nimport { SearchComponent } from './components/search/search.component';\nimport { NgxMatSelectSearchModule } from 'ngx-mat-select-search';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { UtilizationApiComponent } from './components/utilization-api/utilization-api.component';\nimport { UserAccountComponent } from './components/user-account/user-account.component';\n\n@NgModule({\n  declarations: [\n    DashboardComponent,\n    PortalComponent,\n    ApiDocumentationComponent,\n    SearchComponent,\n    UtilizationApiComponent,\n    UserAccountComponent,\n  ],\n  imports: [\n    CommonModule,\n    PortalRoutingModule,\n    LayoutModule,\n    MaterialModule,\n    NgxMatSelectSearchModule,\n    ReactiveFormsModule,\n    FormsModule,\n  ],\n})\nexport class PortalModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ApiDocumentationComponent"
                        },
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "PortalComponent"
                        },
                        {
                            "name": "SearchComponent"
                        },
                        {
                            "name": "UserAccountComponent"
                        },
                        {
                            "name": "UtilizationApiComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LayoutModule"
                        },
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "PortalRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PortalRoutingModule",
            "id": "module-PortalRoutingModule-cb10be8e048b426240317dd1fa836170976eb39cd638da0f825ef8232d9526e1124233a4a519f29263e3704278e5af50be76cc4383a405959b002e1de2bcbe15",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/portal/portal-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PortalComponent } from './components/base/portal.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { ApiDocumentationComponent } from './components/documentation-api/api-documentation.component';\nimport { UtilizationApiComponent } from './components/utilization-api/utilization-api.component';\nimport { UserAccountComponent } from './components/user-account/user-account.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PortalComponent,\n    // redirectTo: '/portal/dash',\n    // pathMatch: 'full',\n    children: [\n      {\n        path: '',\n        component: DashboardComponent,\n      },\n      {\n        path: 'documentation/:id',\n        component: ApiDocumentationComponent,\n      },\n      {\n        path: 'utilization',\n        component: UtilizationApiComponent,\n      },\n      {\n        path: 'account',\n        component: UserAccountComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PortalRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "materialModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/material.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  MatAutocompleteModule,\n  MatCheckboxModule,\n  MatDatepickerModule,\n  MatNativeDateModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatRadioModule,\n  MatSelectModule,\n  MatSliderModule,\n  MatSlideToggleModule,\n  MatMenuModule,\n  MatSidenavModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatDividerModule,\n  MatExpansionModule,\n  MatGridListModule,\n  MatListModule,\n  MatStepperModule,\n  MatTabsModule,\n  MatTreeModule,\n  MatButtonModule,\n  MatButtonToggleModule,\n  MatBadgeModule,\n  MatChipsModule,\n  MatIconModule,\n  MatProgressSpinnerModule,\n  MatProgressBarModule,\n  MatRippleModule,\n  MatBottomSheetModule,\n  MatDialogModule,\n  MatSnackBarModule,\n  MatTooltipModule,\n  MatPaginatorModule,\n  MatSortModule,\n  MatTableModule,\n]"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\n  title: 'Example/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  render: (args: ButtonComponent) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HeaderComponent>",
                "defaultValue": "{\n  title: 'Example/Header',\n  component: HeaderComponent,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: ['autodocs'],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PageComponent>",
                "defaultValue": "{\n  title: 'Example/Page',\n  component: PageComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Redoc",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/portal/components/documentation-api/api-documentation.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "Redoc",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/portal/services/redoc/redoc.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HeaderComponent>",
                "file": "src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PageComponent>",
                "file": "src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\n  title: 'Example/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  render: (args: ButtonComponent) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
                }
            ],
            "src/stories/header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HeaderComponent>",
                    "defaultValue": "{\n  title: 'Example/Header',\n  component: HeaderComponent,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: ['autodocs'],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "src/stories/page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PageComponent>",
                    "defaultValue": "{\n  title: 'Example/Page',\n  component: PageComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "src/material.module.ts": [
                {
                    "name": "materialModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/material.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  MatAutocompleteModule,\n  MatCheckboxModule,\n  MatDatepickerModule,\n  MatNativeDateModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatRadioModule,\n  MatSelectModule,\n  MatSliderModule,\n  MatSlideToggleModule,\n  MatMenuModule,\n  MatSidenavModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatDividerModule,\n  MatExpansionModule,\n  MatGridListModule,\n  MatListModule,\n  MatStepperModule,\n  MatTabsModule,\n  MatTreeModule,\n  MatButtonModule,\n  MatButtonToggleModule,\n  MatBadgeModule,\n  MatChipsModule,\n  MatIconModule,\n  MatProgressSpinnerModule,\n  MatProgressBarModule,\n  MatRippleModule,\n  MatBottomSheetModule,\n  MatDialogModule,\n  MatSnackBarModule,\n  MatTooltipModule,\n  MatPaginatorModule,\n  MatSortModule,\n  MatTableModule,\n]"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
                }
            ],
            "src/app/portal/components/documentation-api/api-documentation.component.ts": [
                {
                    "name": "Redoc",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/portal/components/documentation-api/api-documentation.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "src/app/portal/services/redoc/redoc.service.ts": [
                {
                    "name": "Redoc",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/portal/services/redoc/redoc.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/stories/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HeaderComponent>",
                    "file": "src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PageComponent>",
                    "file": "src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "BaseComponent"
                    },
                    {
                        "path": "auth",
                        "loadChildren": "./authentication/authentication.module#AuthenticationModule"
                    },
                    {
                        "path": "portal",
                        "loadChildren": "./portal/portal.module#PortalModule"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/authentication/authentication-routing.module.ts",
                "module": "AuthenticationRoutingModule",
                "children": [
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "signup",
                        "component": "RegistrationComponent"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/portal/portal-routing.module.ts",
                "module": "PortalRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "PortalComponent",
                        "children": [
                            {
                                "path": "",
                                "component": "DashboardComponent"
                            },
                            {
                                "path": "documentation/:id",
                                "component": "ApiDocumentationComponent"
                            },
                            {
                                "path": "utilization",
                                "component": "UtilizationApiComponent"
                            },
                            {
                                "path": "account",
                                "component": "UserAccountComponent"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/components/registration/registration.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegistrationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/interfaces/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserSignUp",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/services/authentication.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthenticationService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/base/base.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/homepage/homepage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomepageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/components/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/portal/components/base/portal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PortalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/portal/components/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/portal/components/documentation-api/api-documentation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ApiDocumentationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/portal/components/documentation-api/api-documentation.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Redoc",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/portal/components/search/search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/portal/components/user-account/user-account.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserAccountComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/portal/components/utilization-api/utilization-api.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UtilizationApiComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/portal/interfaces/api-keys.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApiKeys",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/portal/services/module-data/data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/portal/services/redoc/redoc.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RedocService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/portal/services/redoc/redoc.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Redoc",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/snackbar/snackbar-service.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnackbarServiceService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/material.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "materialModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}